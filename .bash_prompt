# ------------------------------------------------------------------
# | Change the Bash Prompt - 11.15.18                              |
# ------------------------------------------------------------------


# will show heart eye cat when command went through
# will show sad cat when command did not go through
  function cats () {
  if [ $? == 0 ]; then
    printf '\xF0\x9F\x98\xBB'
  else
    printf '\xF0\x9F\x98\xBF'
  fi
  }

# function to notify user of current git branch
  prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

	# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;
		fi;
	# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.
		 branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}";
	else
		return;
	fi;
}


# time 24 hours
  PS1="\[\e[1m\A\] ";
# date
  PS1+="\[\e[38m\d\]";
# calling previous git prompt function for git branch status
  PS1+="\$(prompt_git \"\[\e[33m\] on \[\e[33m\]\" \"\[\e[33m\]\")"; # Git repository details
# directory
  PS1+="\[\e[32m\] in\[\e[32m\] \[\e[32m\W\] ";
# user
  PS1+="\[\e[32m\]as\[\e[32m\] \[\e[32m\u\] ";
# exit status
  PS1+="\[\e[31m\$?\] ";
# newline
  PS1+="\n";
# calling previous cats func for exit status
  PS1+="$(cats)  ";
# reset color
  PS1+="\[\e[0m\]$ ";
export PS1;
